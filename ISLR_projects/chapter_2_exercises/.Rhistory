knitr::opts_chunk$set(echo = TRUE)
x_values <- as.factor(c("low", "medium", "high"), levels = c("low", "medium", "high"))
x_values <- factor(c("low", "medium", "high"), levels = c("low", "medium", "high"))
x_values
flexibility <- factor(c("low", "medium", "high"), levels = c("low", "medium", "high"))
sq_bias <- c(1, 0.5, 0)
variance <- c(0, 0.5, 1)
training_error <- c(0, 0.5, 1)
test_error <- c(0.5, 0.5, 0.5)
bayes_error <- c(0.5, 0.5, 0.5)
plot_data <- data.frame(flexibility, sq_bias, variance, training_error, test_error, bayes_error)
jitter(c(0, 0.5, 1))
sq_bias <- jitter(c(1, 0.5, 0))
variance <- jitter(c(0, 0.5, 1))
training_error <- jitter(c(0, 0.5, 1))
test_error <- jitter(c(0.5, 0.5, 0.5))
bayes_error <- jitter(c(0.5, 0.5, 0.5))
plot_data <- data.frame(flexibility, sq_bias, variance, training_error, test_error, bayes_error)
View(plot_data)
plot_data_long <- melt(plot_data, id = "flexibility")
library(reshape)
library(reshape2)
plot_data_long <- melt(plot_data, id = "flexibility")
View(plot_data_long)
knitr::opts_chunk$set(echo = TRUE)
library(reshape2)
library(ggplot2)
names(plot_data_long) <- c("flexibility", "variable", "general_value")
prob3_plot <- ggplot(plot_data_long, aes(x = flexibility, y = general_value, color = variable)) +
geom_point() +
geom_line()
prob3_plot
prob3_plot <- ggplot(plot_data_long, aes(x = flexibility, y = general_value, color = variable)) +
geom_point() +
geom_path()
prob3_plot
prob3_plot <- ggplot(plot_data_long, aes(x = flexibility, y = general_value, color = variable, group = variable)) +
geom_point() +
geom_path()
prob3_plot
prob3_plot <- ggplot(plot_data_long, aes(x = flexibility, y = general_value, color = variable, group = variable)) +
geom_point() +
geom_path() +
labs(caption = "Training and Test errors are heavily dependent on structure of the underlying truth and is therefore unknown simply based on the model flexibility.")
prob3_plot
prob3_plot <- ggplot(plot_data_long, aes(x = flexibility, y = general_value, color = variable, group = variable)) +
geom_point() +
geom_path() +
labs(caption = "* Training and Test errors are heavily dependent on structure of the underlying truth and is therefore unknown simply based on the model flexibility.")
plot_data_wide <- data.frame(flexibility, sq_bias, variance, training_error, test_error, bayes_error)
plot_data_long <- melt(plot_data, id = "flexibility")
names(plot_data_long) <- c("flexibility", "variable", "general_value")
plot_data_long$variable[plot_data_long$variable == "test_error"] <- "test_error*"
plot_data_long$variable[plot_data_long$variable == "training_error"] <- "training_error*"
prob3_plot <- ggplot(plot_data_long, aes(x = flexibility, y = general_value, color = variable, group = variable)) +
geom_point() +
geom_path() +
labs(caption = "* Training and Test errors are heavily dependent on structure of the underlying truth and is therefore unknown simply based on the model flexibility.")
plot_data_wide <- data.frame(flexibility, sq_bias, variance, training_error, test_error, bayes_error)
plot_data_long <- melt(plot_data, id = "flexibility")
names(plot_data_long) <- c("flexibility", "variable", "general_value")
plot_data_long$variable[plot_data_long$variable == "test_error"] <- "test_error*"
prob3_plot
flexibility <- factor(c("low", "medium", "high"), levels = c("low", "medium", "high"))
sq_bias <- jitter(c(1, 0.5, 0))
variance <- jitter(c(0, 0.5, 1))
training_error <- jitter(c(0, 0.5, 1))
test_error <- jitter(c(0.5, 0.5, 0.5))
bayes_error <- jitter(c(0.5, 0.5, 0.5))
plot_data_wide <- data.frame(flexibility, sq_bias, variance, training_error, test_error, bayes_error)
plot_data_long <- melt(plot_data, id = "flexibility")
names(plot_data_long) <- c("flexibility", "variable", "general_value")
prob3_plot <- ggplot(plot_data_long, aes(x = flexibility, y = general_value, color = variable, group = variable)) +
geom_point() +
geom_path() +
labs(caption = "* Training and Test errors are heavily dependent on structure of the underlying truth and is therefore unknown simply based on the model flexibility.")
prob3_plot
sq_bias <- jitter(c(1, 0.5, 0))
variance <- jitter(c(0, 0.5, 1))
training_error <- jitter(c(1, 0.5, 0))
test_error <- jitter(c(1, 0.5, 1))
bayes_error <- jitter(c(0.5, 0.5, 0.5))
plot_data_wide <- data.frame(flexibility, sq_bias, variance, training_error, test_error, bayes_error)
plot_data_long <- melt(plot_data, id = "flexibility")
names(plot_data_long) <- c("flexibility", "variable", "general_value")
prob3_plot <- ggplot(plot_data_long, aes(x = flexibility, y = general_value, color = variable, group = variable)) +
geom_point() +
geom_path() +
labs(caption = "* Training and Test errors are heavily dependent on structure of the underlying truth and is therefore unknown simply based on the model flexibility.")
prob3_plot
sq_bias <- jitter(c(1, 0.5, 0))
variance <- jitter(c(0, 0.5, 1))
training_error <- jitter(c(1, 0.5, 0))
test_error <- jitter(c(1, 0.5, 1))
bayes_error <- jitter(c(0.5, 0.5, 0.5))
plot_data_wide <- data.frame(flexibility, sq_bias, variance, training_error, test_error, bayes_error)
plot_data_long <- melt(plot_data, id = "flexibility")
names(plot_data_long) <- c("flexibility", "variable", "general_value")
prob3_plot <- ggplot(plot_data_long, aes(x = flexibility, y = general_value, color = variable, group = variable)) +
geom_point() +
geom_path() +
labs(caption = "* Training and Test errors are heavily dependent on structure of the underlying truth and is therefore unknown simply based on the model flexibility.")
prob3_plot
plot_data_long <- melt(plot_data_wide, id = "flexibility")
names(plot_data_long) <- c("flexibility", "variable", "general_value")
prob3_plot <- ggplot(plot_data_long, aes(x = flexibility, y = general_value, color = variable, group = variable)) +
geom_point() +
geom_path() +
labs(caption = "* Training and Test errors are heavily dependent on structure of the underlying truth and is therefore unknown simply based on the model flexibility.")
prob3_plot
flexibility <- factor(c("too low", "best case", "too high"), levels = c("low", "medium", "high"))
sq_bias <- jitter(c(1, 0.5, 0))
variance <- jitter(c(0, 0.5, 1))
training_error <- jitter(c(1, 0.5, 0))
test_error <- jitter(c(1, 0.5, 1))
bayes_error <- jitter(c(0.5, 0.5, 0.5))
plot_data_wide <- data.frame(flexibility, sq_bias, variance, training_error, test_error, bayes_error)
plot_data_long <- melt(plot_data_wide, id = "flexibility")
names(plot_data_long) <- c("flexibility", "variable", "general_value")
prob3_plot <- ggplot(plot_data_long, aes(x = flexibility, y = general_value, color = variable, group = variable)) +
geom_point() +
geom_path() +
labs(caption = "* Training and Test errors are heavily dependent on structure of the underlying truth and is therefore unknown simply based on the model flexibility.")
prob3_plot
flexibility <- factor(c("too low", "best case", "too high"), levels = c("low", "medium", "high"))
flexibility <- factor(c("too_low", "best_case", "too_high"), levels = c("too_low", "best_case", "too_high"))
sq_bias <- jitter(c(1, 0.5, 0))
variance <- jitter(c(0, 0.5, 1))
training_error <- jitter(c(1, 0.5, 0))
test_error <- jitter(c(1, 0.5, 1))
bayes_error <- jitter(c(0.5, 0.5, 0.5))
plot_data_wide <- data.frame(flexibility, sq_bias, variance, training_error, test_error, bayes_error)
plot_data_long <- melt(plot_data_wide, id = "flexibility")
names(plot_data_long) <- c("flexibility", "variable", "general_value")
prob3_plot <- ggplot(plot_data_long, aes(x = flexibility, y = general_value, color = variable, group = variable)) +
geom_point() +
geom_path()
prob3_plot
# Calulate squared differences for each dimenstion
sq_diffs <- sapply(1:dims, function(x) {(test_point[x] - obs_point[x])^2})
# Get the number of dimensions
dims <- length(test_point)
test_table <- cbind(c(0,3,0),
c(2,0,0),
c(0,1,3),
c(0,1,2),
c(-1,0,1),
c(1,1,1))
View(test_table)
test_table <- rbind(c(0,3,0),
c(2,0,0),
c(0,1,3),
c(0,1,2),
c(-1,0,1),
c(1,1,1))
View(test_table)
test_point <- test_table[1,]
ref_point <- c(0, 0, 0)
calc_euclid_dist <- function(ref_point, test_point)
{
# Get the number of dimensions
dims <- length(test_point)
# Calulate squared differences for each dimenstion
sq_diffs <- sapply(1:dims, function(x) {(test_point[x] - obs_point[x])^2})
}
# Get the number of dimensions
dims <- length(ref_point)
# Calulate squared differences for each dimenstion
sq_diffs <- sapply(1:dims, function(x) {(ref_point[x] - test_point[x])^2})
sum(sq_diffs)
sum(sq_diffs)^0.5
calc_euclid_dist <- function(ref_point, test_point)
{
# Get the number of dimensions
dims <- length(ref_point)
# Calulate squared differences for each dimenstion
sq_diffs <- sapply(1:dims, function(x) {(ref_point[x] - test_point[x])^2})
# Calculate the square root of the sum of squares
dist <- sum(sq_diffs)^0.5
return(distance)
}
test_table <- rbind(c(0,3,0),
c(2,0,0),
c(0,1,3),
c(0,1,2),
c(-1,0,1),
c(1,1,1))
ref_point <- c(0, 0, 0)
apply(test_table, 1, calc_euclid_dist, ref_point = ref_point)
calc_euclid_dist <- function(ref_point, test_point)
{
# Get the number of dimensions
dims <- length(ref_point)
# Calulate squared differences for each dimenstion
sq_diffs <- sapply(1:dims, function(x) {(ref_point[x] - test_point[x])^2})
# Calculate the square root of the sum of squares
dist <- sum(sq_diffs)^0.5
return(dist)
}
test_table <- rbind(c(0,3,0),
c(2,0,0),
c(0,1,3),
c(0,1,2),
c(-1,0,1),
c(1,1,1))
ref_point <- c(0, 0, 0)
apply(test_table, 1, calc_euclid_dist, ref_point = ref_point)
print(round(distances, 2))
distances = apply(test_table, 1, calc_euclid_dist, ref_point = ref_point)
print(round(distances, 2))
colors <- as.factor(c("Red", "Red", "Red", "Green", "Green", "Red"))
prob5_table <- data.frame(test_table, colors, distances)
View(prob5_table)
prob5_table
prob5_table <- data.frame(1:6, test_table, colors, distances)
prob5_table
names(prob5_table) <- c("index", "X1", "X2", "X3", "Y", "distance")
prob5_table
