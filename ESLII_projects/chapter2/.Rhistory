qplot(results$mean[results$dist_type == "multivariate_norm"], fill = results$dist_type)
results$mean[results$dist_type == "multivariate_norm"]
test <- results$mean[results$dist_type == "multivariate_norm"]
qplot(test)
test <- results$mean[results$dist_type == "norm"]
ggplot(results, aes(x = mean, fill = dist_type)) +
geom_histogram(alpha = 0.2)
ggplot(results) +
geom_histogram(data = subset(histogram, dist_type = "multivariate_norm"), fill = "red", alpha = 0.2) +
geom_histogram(data = subset(histogram, dist_type = "multivariate_norm"), fill = "blue", alpha = 0.2)
ggplot(results) +
geom_histogram(data = subset(results, dist_type == "multivariate_norm"), fill = "red", alpha = 0.2) +
geom_histogram(data = subset(results, dist_type == "norm"), fill = "blue", alpha = 0.2)
ggplot(results, aes(x = results$mean)) +
geom_histogram(data = subset(results, dist_type == "multivariate_norm"), fill = "red", alpha = 0.2) +
geom_histogram(data = subset(results, dist_type == "norm"), fill = "blue", alpha = 0.2)
subset(results, dist_type == "multivariate_norm")
ggplot(results, aes(x = mean)) +
geom_histogram(data = subset(results, dist_type == "multivariate_norm"), fill = "red", alpha = 0.2) +
geom_histogram(data = subset(results, dist_type == "norm"), fill = "blue", alpha = 0.2)
# Recreating the simulation from section 2.3.3
simulation_2.3.3 <- function(n)
{
I <- cbind(c(1,0), c(0,1))
blue_means <- mvrnorm(n=10, mu=c(1,0), Sigma = I)
orange_means <- mvrnorm(n=10, mu=c(0,1), Sigma = I)
# Simulate blue classes
blue_table <- data.frame(matrix(nrow = ceiling(n/2), ncol = 3))
names(blue_table) <- c("y", "x1", "x2")
blue_table$y <- 0
for (i in 1:nrow(blue_table))
{
mk_rand = sample(1:10, 1)
blue_table[i,2:3] <- mvrnorm(1, blue_means[mk_rand,], I/5)
}
# Simulate orange_classes
orange_table <- data.frame(matrix(nrow = floor(n/2), ncol = 3))
names(orange_table) <- c("y", "x1", "x2")
orange_table$y <- 1
for (i in 1:nrow(orange_table))
{
mk_rand = sample(1:10, 1)
orange_table[i,2:3] <- mvrnorm(1, orange_means[mk_rand,], I/5)
}
sim_results <- rbind(blue_table, orange_table)
return(sim_results)
}
example_simulation <- simulation_2.3.3(200)
qplot(example_simulation$x1, example_simulation$x2, color = as.factor(example_simulation$y)) +
scale_color_manual(values = c('lightskyblue3', 'orange1')) +
labs(x = "X1", y = "X2", color = "Response")
example_simulation <- simulation_2.3.3(200)
qplot(example_simulation$x1, example_simulation$x2, color = as.factor(example_simulation$y)) +
scale_color_manual(values = c('lightskyblue3', 'orange1')) +
labs(x = "X1", y = "X2", color = "Response")
example_simulation <- simulation_2.3.3(200)
qplot(example_simulation$x1, example_simulation$x2, color = as.factor(example_simulation$y)) +
scale_color_manual(values = c('lightskyblue3', 'orange1')) +
labs(x = "X1", y = "X2", color = "Response")
example_simulation <- simulation_2.3.3(200)
qplot(example_simulation$x1, example_simulation$x2, color = as.factor(example_simulation$y)) +
scale_color_manual(values = c('lightskyblue3', 'orange1')) +
labs(x = "X1", y = "X2", color = "Response")
example_simulation <- simulation_2.3.3(200)
qplot(example_simulation$x1, example_simulation$x2, color = as.factor(example_simulation$y)) +
scale_color_manual(values = c('lightskyblue3', 'orange1')) +
labs(x = "X1", y = "X2", color = "Response")
I/5
1/5
##### Sim 2.3.3 #####
simulation_2.3.3 <- function(n)
{
I <- cbind(c(1,0), c(0,1))
blue_means <- mvrnorm(n=10, mu=c(1,0), Sigma = I)
orange_means <- mvrnorm(n=10, mu=c(0,1), Sigma = I)
# Simulate blue classes
blue_table <- data.frame(matrix(nrow = ceiling(n/2), ncol = 3))
names(blue_table) <- c("y", "x1", "x2")
blue_table$y <- 0
for (i in 1:nrow(blue_table))
{
mk_rand = sample(1:10, 1)
blue_table[i,2:3] <- mvrnorm(1, blue_means[mk_rand,], I/5)
}
# Simulate orange_classes
orange_table <- data.frame(matrix(nrow = floor(n/2), ncol = 3))
names(orange_table) <- c("y", "x1", "x2")
orange_table$y <- 1
for (i in 1:nrow(orange_table))
{
mk_rand = sample(1:10, 1)
orange_table[i,2:3] <- mvrnorm(1, orange_means[mk_rand,], I/5)
}
sim_results <- rbind(blue_table, orange_table)
return(sim_results)
}
test_data <- simulation_2.3.3(200)
#### Chapter 2: Overview of Supervised Learning Methods ####
library(ggplot2) # For plotting
library(MASS) # For the bivariate normal function
test_data <- simulation_2.3.3(200)
y_vect <- test_data$y
x_mat <- as.matrix(test_data[,2:3])
y_vect
x_mat_full <- cbind(rep(1, nrow(x_mat)), x_mat)
beta <- (t(x_mat_full) %*% x_mat_full)^-1 %*% (t(x_mat_full) * y_vect)
beta
beta <- (t(x_mat_full) %*% x_mat_full)^-1 %*% (t(x_mat_full) * t(y_vect))
beta <- (t(x_mat_full) %*% x_mat_full)^-1 %*% (t(x_mat_full) * y_vect)
beta <- ((t(x_mat_full) %*% x_mat_full)^-1) %*% (t(x_mat_full) * y_vect)
beta <- ((t(x_mat_full) %*% x_mat_full)^-1) %*% (t(x_mat_full) %*% y_vect)
preds <- x_mat_full %*% betas
betas <- ((t(x_mat_full) %*% x_mat_full)^-1) %*% (t(x_mat_full) %*% y_vect)
preds <- x_mat_full %*% betas
qplot(preds, y_vect)
x1_max <- max(x_mat[,1])
x1_min <- min(x_mat[,1])
x2_max <- (0.5 - beta[1] - x1_max * beta[2]) / beta[3]
x2_max <- (0.5 - beta[1] - x1_min * beta[2]) / beta[3]
boundary_pts <- data.frame(c(x1_min, x1_max), c(x2_min, x2_max))
x2_min <- (0.5 - beta[1] - x1_min * beta[2]) / beta[3]
boundary_pts <- data.frame(c(x1_min, x1_max), c(x2_min, x2_max))
names(boundary_pts) <- c("x1", "x2")
ggplot(test_data$x1, test_data$x2, color = as.factor(test_data$y)) +
geom_line(data = boundary_pts, aes(x = x1, y = x2))
ggplot(test_data, aes(x = x1, y = x2, color = y)) +
geom_line(data = boundary_pts, aes(x = x1, y = x2))
ggplot(test_data, aes(x = x1, y = x2, color = y)) +
geom_point() +
geom_line(data = boundary_pts, aes(x = x1, y = x2))
names(test_data) <- c("y_sim", "x1_sim", "x2_sim")
ggplot(test_data, aes(x = x1, y = x2, color = y)) +
geom_point() +
geom_line(data = boundary_pts, aes(x = x1, y = x2))
ggplot(data = test_data, aes(x = x1, y = x2, color = y)) +
geom_point() +
geom_line(data = boundary_pts, aes(x = x1, y = x2))
ggplot(data = test_data, aes(x = x1_sim, y = x2_sim, color = y_sim)) +
geom_point() +
geom_line(data = boundary_pts, aes(x = x1, y = x2))
test_data$y_sim
qplot(test_data$x1_sim, test_data$x2_sim, color = test_data$y_sim) +
geom_point() +
geom_line(data = boundary_pts, aes(x = x1, y = x2))
qplot(test_data$x1_sim, test_data$x2_sim, color = test_data$y_sim)
qplot(test_data$x1_sim, test_data$x2_sim, color = test_data$y_sim) +
geom_line(data = boundary_pts, aes(x = x1, y = x2))
qplot(test_data$x1_sim, test_data$x2_sim, color = test_data$y_sim) +
geom_line(aes(x = boundary_pts$x1, y = boundary_pts$x2))
qplot(test_data$x1_sim, test_data$x2_sim, color = test_data$y_sim) +
qplot(aes(x = boundary_pts$x1, y = boundary_pts$x2))
qplot(test_data$x1_sim, test_data$x2_sim, color = test_data$y_sim) +
qplot(aes(x = boundary_pts$x1, y = boundary_pts$x2))
qplot(test_data$x1_sim, test_data$x2_sim, color = test_data$y_sim)
-18/3
(0.5 - beta[1] - 0 * beta[2]) / beta[3]
x1_mid <- (x1_max - x1_min) / 2 + x1_min
x1_mid2 <- x1_mid + (x1_max - x1_mid) * 0.1
x2_mid <- (0.5 - betas[1] - x1_mid * beta[2]) / beta[3]
x2_mid2 <- (0.5 - beta[1] - x1_mid2 * beta[2]) / beta[3]
View(x_mat_full)
(0.5 - betas[1] - x1_mid * beta[2])
(0.5 - betas[1] - (x1_mid * beta[2]))
x2_mid <- (0.5 - betas[1] - 0 * beta[2]) / beta[3]
x1_mid <- (0.5 - betas[1] - 0 * beta[2]) / beta[3]
x2_mid <- (0.5 - betas[1] - 1 * beta[2]) / beta[3]
x2_mid <- (0.5 - betas[1] - 0 * beta[2]) / beta[3]
x2_mid2 <- (0.5 - betas[1] - 1 * beta[2]) / beta[3]
predict_eq_2.6(t(c(0,0)), betas)
predict_eq_2.6 <- function(x_mat, betas)
{
x_mat_full <- cbind(rep(1, nrow(x_mat)), x_mat)
preds <- x_mat_full %*% betas
return(preds)
}
predict_eq_2.6(t(c(0,0)), betas)
x1_max <- max(x_mat[,1])
x1_min <- min(x_mat[,1])
x1_mid <- (x1_max - x1_min) / 2 + x1_min
x1_mid2 <- x1_mid + (x1_max - x1_mid) * 0.1
x2_mid <- (0.5 - betas[1] - x1_mid * beta[2]) / beta[3]
x2_mid2 <- (0.5 - beta[1] - x1_mid2 * beta[2]) / beta[3]
predict_eq_2.6(t(c(x1_mid,x2_mid)), betas)
x1_max <- max(x_mat[,1])
x1_min <- min(x_mat[,1])
x1_mid <- (x1_max - x1_min) / 2 + x1_min
x1_mid2 <- x1_mid + (x1_max - x1_mid) * 0.1
x1_mid2 <- x1_mid + ((x1_max - x1_mid) * 0.1 )
x2_mid <- (0.5 - betas[1] - x1_mid * beta[2]) / beta[3]
x2_mid2 <- (0.5 - beta[1] - x1_mid2 * beta[2]) / beta[3]
boundary_pts <- data.frame(c(x1_min, x1_max), c(x2_min, x2_max))
boundary_pts <- data.frame(c(x1_min, x1_max), c(x2_mid, x2_mid2))
x2_min <- (0.5 - betas[1] - x1_min * beta[2]) / beta[3]
x2_max <- (0.5 - beta[1] - x1_max * beta[2]) / beta[3]
boundary_pts <- data.frame(c(x1_min, x1_max), c(x2_mid, x2_mid2))
qplot(test_data$x1_sim, test_data$x2_sim, color = test_data$y_sim)
qplot(test_data$x1_sim, test_data$x2_sim, color = test_data$y_sim) +
qplot(aes(x = boundary_pts$x1, y = boundary_pts$x2))
qplot(test_data$x1_sim, test_data$x2_sim, color = test_data$y_sim) +
geom_line(aes(x = boundary_pts$x1, y = boundary_pts$x2))
names(boundary_pts) <- c("x1", "x2")
qplot(test_data$x1_sim, test_data$x2_sim, color = test_data$y_sim) +
geom_line(boundary_pts, aes(x = boundary_pts$x1, y = boundary_pts$x2))
ggplot(test_data, aes(x = x1_sim, y = x2_sim, color = y_sim)) +
geom_line(boundary_pts, aes(x = boundary_pts$x1, y = boundary_pts$x2))
ggplot(test_data, aes(x = x1_sim, y = x2_sim, color = y_sim)) +
geom_point()
ggplot(data = boundary_pts, aes(x = x1, y = x2)) +
geom_line()
ggplot(test_data, aes(x = x1_sim, y = x2_sim, color = y_sim)) +
geom_point()
test_data <- simulation_2.3.3(200)
betas <- equation_2.6(test_data$y, as.matrix(test_data[,2:3]))
# Implementing least squares equation
equation_2.6 <- function(y_vect, x_mat)
{
x_mat_full <- cbind(rep(1, nrow(x_mat)), x_mat)
betas <- ((t(x_mat_full) %*% x_mat_full)^-1) %*% (t(x_mat_full) %*% y_vect)
return(beta)
}
predict_eq_2.6 <- function(x_mat, betas)
{
x_mat_full <- cbind(rep(1, nrow(x_mat)), x_mat)
preds <- x_mat_full %*% betas
return(preds)
}
calc_line_fig2.1 <- function(betas, y_vect, x_mat)
{
x1_max <- max(x_mat[,1])
x1_min <- min(x_mat[,1])
x2_min <- (0.5 - betas[1] - x1_min * beta[2]) / beta[3]
x2_max <- (0.5 - beta[1] - x1_max * beta[2]) / beta[3]
boundary_pts <- data.frame(c(x1_min, x1_max), c(x2_mid, x2_mid2))
names(boundary_pts) <- c("x1", "x2")
return(boundary_pts)
}
test_data <- simulation_2.3.3(200)
betas <- equation_2.6(test_data$y, as.matrix(test_data[,2:3]))
test_data <- simulation_2.3.3(200)
betas <- equation_2.6(test_data$y, as.matrix(test_data[,2:3]))
test_data <- simulation_2.3.3(200)
betas <- equation_2.6(test_data$y, as.matrix(test_data[,2:3]))
test_data <- simulation_2.3.3(200)
betas <- equation_2.6(test_data$y, as.matrix(test_data[,2:3]))
preds <- predict_eq_2.6(as.matrix(test_data[,2:3]), betas)
preds
x2_min <- (0.5 + betas[1] - x1_min * beta[2]) / beta[3]
x2_max <- (0.5 + beta[1] - x1_max * beta[2]) / beta[3]
calc_line_fig2.1 <- function(betas, y_vect, x_mat)
{
x1_max <- max(x_mat[,1])
x1_min <- min(x_mat[,1])
x2_min <- (0.5 + betas[1] - x1_min * beta[2]) / beta[3]
x2_max <- (0.5 + beta[1] - x1_max * beta[2]) / beta[3]
boundary_pts <- data.frame(c(x1_min, x1_max), c(x2_mid, x2_mid2))
names(boundary_pts) <- c("x1", "x2")
return(boundary_pts)
}
test_data <- simulation_2.3.3(200)
betas <- equation_2.6(test_data$y, as.matrix(test_data[,2:3]))
preds <- predict_eq_2.6(as.matrix(test_data[,2:3]), betas)
names(test_data) <- c("y_sim", "x1_sim", "x2_sim")
ggplot(test_data, aes(x = x1_sim, y = x2_sim, color = y_sim)) +
geom_point()
calc_line_fig2.1 <- function(betas, x_mat)
{
x1_max <- max(x_mat[,1])
x1_min <- min(x_mat[,1])
x2_min <- (0.5 + betas[1] - x1_min * beta[2]) / beta[3]
x2_max <- (0.5 + beta[1] - x1_max * beta[2]) / beta[3]
boundary_pts <- data.frame(c(x1_min, x1_max), c(x2_mid, x2_mid2))
names(boundary_pts) <- c("x1", "x2")
return(boundary_pts)
}
boundary_pts <- calc_line_fig2.1(betas, as.matrix(test_data[,2:3]))
preds <- predict_eq_2.6(t(c(4,-1)), betas)
predict_eq_2.6(t(c(4,-1)), betas)
predict_eq_2.6(t(c(-1,4)), betas)
# Implementing least squares equation
equation_2.6 <- function(y_vect, x_mat)
{
x_mat_full <- cbind(rep(1, nrow(x_mat)), x_mat)
betas <- ((t(x_mat_full) %*% x_mat_full)^-1) %*% t(x_mat_full) %*% y_vect
return(beta)
}
betas <- equation_2.6(test_data$y, as.matrix(test_data[,2:3]))
# Implementing least squares equation
equation_2.6 <- function(y_vect, x_mat)
{
x_mat_full <- cbind(rep(1, nrow(x_mat)), x_mat)
betas <- ((t(x_mat_full) %*% x_mat_full)^-1) %*% t(x_mat_full) %*% y_vect
return(beta)
}
betas <- equation_2.6(test_data$y, as.matrix(test_data[,2:3]))
# Implementing least squares equation
equation_2.6 <- function(y_vect, x_mat)
{
x_mat_full <- cbind(rep(1, nrow(x_mat)), x_mat)
betas <- (t(x_mat_full) %*% x_mat_full)^-1 %*% t(x_mat_full) %*% y_vect
return(beta)
}
betas <- equation_2.6(test_data$y, as.matrix(test_data[,2:3]))
preds <- predict_eq_2.6(as.matrix(test_data[,2:3]), betas)
qplot(test_data$x1_sim, test_data$x2_sim, color = preds)
y_vect <- test_data$y_sim
x_mat <- test_data[,2:3]
x_null <- rep(1, nrow(x_mat))
x_mat_full <- cbind(x_null, x_mat)
betas <- (t(x_mat_full) %*% x_mat_full)^-1 %*% t(x_mat_full) %*% y_vect
View(x_mat_full)
betas <- (t(x_mat_full) %*% x_mat_full)^-1 %*% t(x_mat_full) %*% t(y_vect)
t(x_mat_full)
(t(x_mat_full) %*% x_mat_full)^-1
x_mat_full <- as.matrix(cbind(x_null, x_mat))
betas <- (t(x_mat_full) %*% x_mat_full)^-1 %*% t(x_mat_full) %*% t(y_vect)
betas <- (t(x_mat_full) %*% x_mat_full)^-1 %*% t(x_mat_full) %*% y_vect
beta_null <- (t(x_null) %*% x_null)^-1 %*% t(x_null) %*% y_vect
predict_eq_2.6(boundary_pts, betas)
predict_eq_2.6(as.matrix(boundary_pts), betas)
test_data <- simulation_2.3.3(200)
betas <- equation_2.6(test_data$y, as.matrix(test_data[,2:3]))
preds <- predict_eq_2.6(as.matrix(test_data[,2:3]), betas)
boundary_pts <- calc_line_fig2.1(betas, as.matrix(test_data[,2:3]))
preds_boundary <- predict_eq_2.6(boundary_pts, betas)
predict_eq_2.6 <- function(x_mat, betas)
{
x_mat_full <- as.matrix(cbind(rep(1, nrow(x_mat)), x_mat))
preds <- x_mat_full %*% betas
return(preds)
}
preds_boundary <- predict_eq_2.6(boundary_pts, betas)
calc_line_fig2.1 <- function(betas, x_mat)
{
x1_max <- max(x_mat[,1])
x1_min <- min(x_mat[,1])
x2_min <- (0.5 - betas[1] - x1_min * beta[2]) / beta[3]
x2_max <- (0.5 - beta[1] - x1_max * beta[2]) / beta[3]
boundary_pts <- data.frame(c(x1_min, x1_max), c(x2_mid, x2_mid2))
names(boundary_pts) <- c("x1", "x2")
return(boundary_pts)
}
boundary_pts <- calc_line_fig2.1(betas, as.matrix(test_data[,2:3]))
preds_boundary <- predict_eq_2.6(boundary_pts, betas)
boundary_pts <- calc_line_fig2.1(betas, as.matrix(test_data[,2:3]))
boundary_pts <- calc_line_fig2.1(betas, as.matrix(test_data[,2:3]))
test_data <- simulation_2.3.3(200)
betas <- equation_2.6(test_data$y, as.matrix(test_data[,2:3]))
preds <- predict_eq_2.6(as.matrix(test_data[,2:3]), betas)
boundary_pts <- calc_line_fig2.1(betas, as.matrix(test_data[,2:3]))
preds_boundary <- predict_eq_2.6(boundary_pts, betas)
x1_max <- max(x_mat[,1])
x2_max <- (0.5 - beta[1] - x1_max * beta[2]) / beta[3]
View(preds_boundary)
View(boundary_pts)
predict_eq_2.6(t(c(-1.517, -0.274)))
predict_eq_2.6(t(c(-1.517, -0.274)), betas)
predict_eq_2.6(t(c(0, 0)), betas)
predict_eq_2.6(t(c(0, -.5)), betas)
predict_eq_2.6(t(c(0, -.25)), betas)
predict_eq_2.6(t(c(0, -.1)), betas)
predict_eq_2.6(t(c(0, -.7)), betas)
predict_eq_2.6(t(c(0, .7)), betas)
predict_eq_2.6(t(c(0, -.6)), betas)
predict_eq_2.6(t(c(0, -.7)), betas)
predict_eq_2.6(t(c(0, -.5)), betas)
predict_eq_2.6(t(c(0, -.6)), betas)
predict_eq_2.6(t(c(0, -.)), betas)
predict_eq_2.6(t(c(0, -.4)), betas)
predict_eq_2.6(t(c(0, -.3)), betas)
predict_eq_2.6(t(c(0, -.4)), betas)
1.57 + 2.91 * -.4
predict_eq_2.6(t(c(2, 0)), betas)
predict_eq_2.6(t(c(2, -1)), betas)
max(preds)
min(preds)
min(preds) - max(preds)
min(preds) + ((max(preds) - min(preds)) / 2)
midpt <- min(preds) + ((max(preds) - min(preds)) / 2)
x1_max <- max(x_mat[,1])
x1_min <- min(x_mat[,1])
x2_min <- (midpt - betas[1] - x1_min * beta[2]) / beta[3]
x2_max <- (midpt - beta[1] - x1_max * beta[2]) / beta[3]
boundary_pts <- data.frame(c(x1_min, x1_max), c(x2_mid, x2_mid2))
names(boundary_pts) <- c("x1", "x2")
View(boundary_pts)
x1_max <- max(x_mat[,1])
x1_min <- min(x_mat[,1])
x2_min <- (midpt - betas[1] - x1_min * beta[2]) / beta[3]
x2_max <- (midpt - beta[1] - x1_max * beta[2]) / beta[3]
x1_max <- max(x_mat[,1])
x1_min <- min(x_mat[,1])
x1_max <- max(x_mat[,1])
x1_min <- min(x_mat[,1])
x2_min <- (0.5 - betas[1] - x1_min * beta[2]) / beta[3]
x2_max <- (0.5 - beta[1] - x1_max * beta[2]) / beta[3]
boundary_pts <- data.frame(c(x1_min, x1_max), c(x2_min, x2_max))
names(boundary_pts) <- c("x1", "x2")
x2_min <- (0.5 - betas[1] - x1_min * betas[2]) / betas[3]
x2_max <- (0.5 - beta[1] - x1_max * betas[2]) / betas[3]
boundary_pts <- data.frame(c(x1_min, x1_max), c(x2_min, x2_max))
betas <- equation_2.6(test_data$y, as.matrix(test_data[,2:3]))
rm(beta)
x1_max <- max(x_mat[,1])
x1_min <- min(x_mat[,1])
x2_min <- (0.5 + betas[1] - x1_min * betas[2]) / betas[3]
x2_max <- (0.5 + beta[1] - x1_max * betas[2]) / betas[3]
x2_max <- (0.5 + beta[1] - x1_max * betas[2]) / betas[3]
x2_max <- (0.5 + betas[1] - x1_max * betas[2]) / betas[3]
x2_min <- (0.5 + betas[1] - x1_min * betas[2]) / betas[3]
x2_max <- (0.5 + betas[1] - x1_max * betas[2]) / betas[3]
boundary_pts <- data.frame(c(x1_min, x1_max), c(x2_min, x2_max))
names(boundary_pts) <- c("x1", "x2")
predict_eq_2.6(boundary_pts, betas)
x1_max <- max(x_mat[,1])
x1_min <- min(x_mat[,1])
x2_min <- (0.5 - betas[1] - x1_min * betas[2]) / betas[3]
x2_max <- (0.5 - betas[1] - x1_max * betas[2]) / betas[3]
boundary_pts <- data.frame(c(x1_min, x1_max), c(x2_min, x2_max))
names(boundary_pts) <- c("x1", "x2")
predict_eq_2.6(boundary_pts, betas)
x2_min <- (0.5 - betas[1] - 0 * betas[2]) / betas[3]
x2_min <- (0.5 - betas[1] - 1 * betas[2]) / betas[3]
x2_min <- (0.5 - betas[1] - 4 * betas[2]) / betas[3]
x1_max <- max(x_mat[,1])
x1_min <- min(x_mat[,1])
x2_min <- (midpt - betas[1] - x1_min * betas[2]) / betas[3]
x2_max <- (midpt - betas[1] - x1_max * betas[2]) / betas[3]
boundary_pts <- data.frame(c(x1_min, x1_max), c(x2_min, x2_max))
names(boundary_pts) <- c("x1", "x2")
test <- t(x_mat_full) %*% betas
View(x_mat_full)
test <- t(x_mat_full) %*% betas
test <- x_mat_full %*% betas
preds_adj <- preds / min(preds_adj)
preds_adj <- preds / min(preds)
preds_adj <- preds / max(preds)
preds_adj <- (preds + 0 - min(preds)) / max(preds)
preds_adj
qplot(test_data$x1, test_data$x2, preds_adj)
qplot(test_data$x1, test_data$x2, color = preds_adj)
max(preds_adj)
preds_shift <- (preds + 0 - min(preds))
preds_adj <- preds_shift / max(preds_shift)
preds_adj
max(preds_adj)
qplot(test_data$x1, test_data$x2, color = preds_adj)
test_data <- simulation_2.3.3(200)
betas <- equation_2.6(test_data$y, as.matrix(test_data[,2:3]))
qplot(test_data$x1, test_data$x2, color = test_data$y)
qplot(test_data$x1, test_data$x2, color = preds_adj)
qplot(test_data$x1, test_data$x2, color = test_data$y)
qplot(test_data$x1, test_data$x2, color = preds_adj)
test_data <- simulation_2.3.3(200)
betas <- equation_2.6(test_data$y, as.matrix(test_data[,2:3]))
preds <- predict_eq_2.6(as.matrix(test_data[,2:3]), betas)
preds <- predict_eq_2.6(as.matrix(test_data[,2:3]), betas)
preds <- predict_eq_2.6(test_data[,2:3], betas)
x_mat <- test_data[,2:3]
x_mat_full <- as.matrix(cbind(rep(1, nrow(x_mat)), x_mat))
View(x_mat_full)
betas <- equation_2.6(test_data$y, as.matrix(test_data[,2:3]))
# Implementing least squares equation
equation_2.6 <- function(y_vect, x_mat)
{
x_null <- rep(1, nrow(x_mat))
x_mat_full <- as.matrix(cbind(x_null, x_mat))
betas <- (t(x_mat_full) %*% x_mat_full)^-1 %*% t(x_mat_full) %*% y_vect
beta_null <- (t(x_null) %*% x_null)^-1 %*% t(x_null) %*% y_vect
return(betas)
}
betas <- equation_2.6(test_data$y, as.matrix(test_data[,2:3]))
preds <- predict_eq_2.6(test_data[,2:3], betas)
preds_shift <- (preds + 0 - min(preds))
preds_adj <- preds / max(preds)
qplot(test_data$x1, test_data$x2, color = test_data$y)
qplot(test_data$x1, test_data$x2, color = preds_adj)
qplot(test_data$x1, test_data$x2, color = preds)
?lm
lin_model <- lm(test_data$y ~ test_data[,2:3])
lin_model <- lm(y ~ x1 + x2, data = test_data)
?predict
lin_preds <- predict(lin_model, test_data[,2:3])
lin_preds
qplot(test_data$x1, test_data$x2, color = lin_preds)
qplot(test_data$x1, test_data$x2, color = test_data$y)
qplot(test_data$x1, test_data$x2, color = lin_preds)
# calculate X sums
x_mat_sums <- sum(x_mat)
# calculate X sums
x_mat_sums <- apply(x_mat, 2, sum)
test <- x_mat %*% y
test <- x_mat %*% y
y = test_data$y
x_mat <- test_data[,2:3]
full_x_mat <- cbind(rep(1, nrow(x_mat)), x_mat)
# calculate X sums
x_mat_sums <- apply(x_mat, 2, sum)
# calculate X sums
x_mat_sums <- apply(x_mat_full, 2, sum)
x_mat_full <- cbind(rep(1, nrow(x_mat)), x_mat)
# calculate X sums
x_mat_sums <- apply(x_mat_full, 2, sum)
y_sums <- sum(y)
test <- x_mat %*% y
test <- x_mat %*% t(y)
test <- x_mat %*% as.matrix(y)
test <- x_mat_full %*% as.matrix(y)
test <- x_mat_full %*% y
x_mat_full <- as.matrix(cbind(rep(1, nrow(x_mat)), x_mat))
test <- x_mat_full %*% y
test <- x_mat_full %*% t(y)
test <- x_mat_full %*% as.matrix(y)
